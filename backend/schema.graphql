schema {
  query: Query
  mutation: Mutation
}

type CategoryNode implements Node {
  id: ID!
  name: String!
  ingredients(before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, notes: String, notes_Icontains: String, category: ID, category_Name: String): IngredientNodeConnection!
}

type CategoryNodeConnection {
  pageInfo: PageInfo!
  edges: [CategoryNodeEdge]!
}

type CategoryNodeEdge {
  node: CategoryNode
  cursor: String!
}

input CreateUserInput {
  password: String!
  email: String!
  clientMutationId: String
}

type CreateUserPayload {
  user: UserType
  clientMutationId: String
}

scalar DateTime

scalar GenericScalar

type IngredientNode implements Node {
  id: ID!
  name: String!
  notes: String!
  category: CategoryNode!
}

type IngredientNodeConnection {
  pageInfo: PageInfo!
  edges: [IngredientNodeEdge]!
}

type IngredientNodeEdge {
  node: IngredientNode
  cursor: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

interface Node {
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hello: String
  category(id: ID!): CategoryNode
  allCategories(before: String, after: String, first: Int, last: Int, name: String, ingredients: [ID]): CategoryNodeConnection
  whoami: UserType
  ingredient(id: ID!): IngredientNode
  allIngredients(before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, notes: String, notes_Icontains: String, category: ID, category_Name: String): IngredientNodeConnection
  allUsers(before: String, after: String, first: Int, last: Int, username: String): UserTypeConnection
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

type UserType implements Node {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]!
}

type UserTypeEdge {
  node: UserType
  cursor: String!
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}
